From: Sven Eckelmann <sven@narfation.org>
Date: Fri, 2 Dec 2016 15:36:33 +0100
Subject: ath9k: Reset chip on potential deaf state

The chip is switching seemingly random into a state which can be described
as "deaf". No or nearly no interrupts are generated anymore for incoming
packets. Existing links either break down after a while and new links will
not be established.

The driver doesn't know if there is no other device available or if it
ended up in an "deaf" state. Resetting the chip proactively avoids
permanent problems in case the chip really was in its "deaf" state but
maybe causes unnecessary resets in case it wasn't "deaf".

Signed-off-by: Simon Wunderlich <simon.wunderlich@open-mesh.com>
[sven.eckelmann@open-mesh.com: port to recent ath9k, add commit message]
Signed-off-by: Sven Eckelmann <sven.eckelmann@open-mesh.com>

diff --git a/package/kernel/mac80211/patches/ath/953-ath9k-add-workaround-for-hanging-chip-not-enough-int.patch b/package/kernel/mac80211/patches/ath/953-ath9k-add-workaround-for-hanging-chip-not-enough-int.patch
new file mode 100644
index 0000000000000000000000000000000000000000..6539e32617e5789fdf306c8b7a620d46eb793935
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath/953-ath9k-add-workaround-for-hanging-chip-not-enough-int.patch
@@ -0,0 +1,98 @@
+From: Simon Wunderlich <siwu@hrz.tu-chemnitz.de>
+Date: Tue, 18 Jun 2013 12:25:27 +0200
+Subject: ath9k: add workaround for hanging chip (not enough interrupts)
+
+Signed-off-by: Simon Wunderlich <siwu@hrz.tu-chemnitz.de>
+
+Forwarded: https://patchwork.kernel.org/patch/9427655/
+
+diff --git a/drivers/net/wireless/ath/ath9k/ath9k.h b/drivers/net/wireless/ath/ath9k/ath9k.h
+index e38065b2e79f3df92c4679c310a1de871134460f..4a30ee264e2b062ecfee4bfb229b919eb03dff63 100644
+--- a/drivers/net/wireless/ath/ath9k/ath9k.h
++++ b/drivers/net/wireless/ath/ath9k/ath9k.h
+@@ -1059,6 +1059,9 @@ struct ath_softc {
+ 
+ 	u16 airtime_flags; /* AIRTIME_* */
+ 
++	u64 last_check_time;
++	u32 last_check_interrupts;
++
+ 	struct ath_rx rx;
+ 	struct ath_tx tx;
+ 	struct ath_beacon beacon;
+diff --git a/drivers/net/wireless/ath/ath9k/debug.c b/drivers/net/wireless/ath/ath9k/debug.c
+index 1aeabb58dc022127ba1857262b82f52403c8e4ac..c9e7aeb765fa649344340ee3880f38ee9f9ef40e 100644
+--- a/drivers/net/wireless/ath/ath9k/debug.c
++++ b/drivers/net/wireless/ath/ath9k/debug.c
+@@ -766,6 +766,7 @@ static int read_file_reset(struct seq_file *file, void *data)
+ 		[RESET_TX_DMA_ERROR] = "Tx DMA stop error",
+ 		[RESET_RX_DMA_ERROR] = "Rx DMA stop error",
+ 		[RESET_TYPE_DEADBEEF] = "deadbeef hang",
++		[RESET_TYPE_DEAF] = "deaf hang",
+ 	};
+ 	int i;
+ 
+diff --git a/drivers/net/wireless/ath/ath9k/debug.h b/drivers/net/wireless/ath/ath9k/debug.h
+index 60ada5dd21c9d456f15c8c1f785aeeba4e1acc60..d8e618aead7f70211456767fdcef77fb6b634fa4 100644
+--- a/drivers/net/wireless/ath/ath9k/debug.h
++++ b/drivers/net/wireless/ath/ath9k/debug.h
+@@ -53,6 +53,7 @@ enum ath_reset_type {
+ 	RESET_TX_DMA_ERROR,
+ 	RESET_RX_DMA_ERROR,
+ 	RESET_TYPE_DEADBEEF,
++	RESET_TYPE_DEAF,
+ 	__RESET_TYPE_MAX
+ };
+ 
+diff --git a/drivers/net/wireless/ath/ath9k/link.c b/drivers/net/wireless/ath/ath9k/link.c
+index 3adcc199e336005765c323bd38651cf21dd13c25..1fbeecead568a87719def43d87335f3e3fd8460f 100644
+--- a/drivers/net/wireless/ath/ath9k/link.c
++++ b/drivers/net/wireless/ath/ath9k/link.c
+@@ -349,6 +349,34 @@ void ath_ani_calibrate(struct timer_list *t)
+ 		common->ani.longcal_timer = timestamp;
+ 	}
+ 
++	/* one more check for stuck MAC - not reasonably enough rx interrupts? */
++	ath_dbg(common, CALIBRATE, "DEAFFIX: Doing a %s cal\n", longcal ? "long" : "short");
++	if (longcal) {
++		u32 interval, interrupts, interrupt_per_s;
++
++		interval = jiffies_to_msecs(jiffies - sc->last_check_time);
++		if (sc->sc_ah->caps.hw_caps & ATH9K_HW_CAP_EDMA)
++			interrupts = sc->debug.stats.istats.rxlp - sc->last_check_interrupts;
++		else
++			interrupts = sc->debug.stats.istats.rxok - sc->last_check_interrupts;
++
++		/* sanity check, should be 30 seconds */
++		if (interval < 40000 && interval > 20000) {
++			/* should be at least one interrupt per second */
++			interrupt_per_s = interrupts / (interval / 1000);
++			ath_dbg(common, CALIBRATE, "DEAFFIX: Got %u interrupts in %u sec, %u i/s\n", interrupts, (interval / 1000), interrupt_per_s);
++			if (interrupt_per_s < 1) {
++				printk("ath9k: reset deaf state\n");
++				ath9k_queue_reset(sc, RESET_TYPE_DEAF);
++			}
++		}
++		if (sc->sc_ah->caps.hw_caps & ATH9K_HW_CAP_EDMA)
++			sc->last_check_interrupts = sc->debug.stats.istats.rxlp;
++		else
++			sc->last_check_interrupts = sc->debug.stats.istats.rxok;
++		sc->last_check_time = jiffies;
++	}
++
+ 	/* Short calibration applies only while caldone is false */
+ 	if (!common->ani.caldone) {
+ 		if ((timestamp - common->ani.shortcal_timer) >= short_cal_interval) {
+diff --git a/drivers/net/wireless/ath/ath9k/main.c b/drivers/net/wireless/ath/ath9k/main.c
+index 49c07032e15a041c58b4467c09f470545ffe5bb0..2428da39eb91234d617f3b6214b63d3a9dadc786 100644
+--- a/drivers/net/wireless/ath/ath9k/main.c
++++ b/drivers/net/wireless/ath/ath9k/main.c
+@@ -662,6 +662,8 @@ static int ath9k_start(struct ieee80211_hw *hw)
+ 		"Starting driver with initial channel: %d MHz\n",
+ 		curchan->center_freq);
+ 
++	printk("ath9k: DEAF fix v0.1\n");
++
+ 	ath9k_ps_wakeup(sc);
+ 	mutex_lock(&sc->mutex);
+ 
