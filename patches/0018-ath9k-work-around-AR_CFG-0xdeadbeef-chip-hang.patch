From: Sven Eckelmann <sven@narfation.org>
Date: Fri, 2 Dec 2016 15:36:08 +0100
Subject: ath9k: work around AR_CFG 0xdeadbeef chip hang

QCA 802.11n chips (especially AR9330/AR9340) sometimes end up in a state in
which a read of AR_CFG always returns 0xdeadbeef. This should not happen
when when the power_mode of the device is ATH9K_PM_AWAKE.

This problem is not yet detected by any other workaround in ath9k. No way
is known to reproduce the problem easily.

Signed-off-by: Simon Wunderlich <simon.wunderlich@open-mesh.com>
[sven.eckelmann@open-mesh.com: port to recent ath9k, add commit message]
Signed-off-by: Sven Eckelmann <sven.eckelmann@open-mesh.com>

diff --git a/package/kernel/mac80211/patches/ath/950-Revert-355-ath9k_hw-check-if-the-chip-failed-to-wake.patch b/package/kernel/mac80211/patches/ath/950-Revert-355-ath9k_hw-check-if-the-chip-failed-to-wake.patch
new file mode 100644
index 0000000000000000000000000000000000000000..146d0a9cf8ada26a6ff7d3ed32b4041fbadba822
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath/950-Revert-355-ath9k_hw-check-if-the-chip-failed-to-wake.patch
@@ -0,0 +1,19 @@
+From: Sven Eckelmann <sven@narfation.org>
+Date: Thu, 23 Apr 2020 18:43:56 +0200
+Subject: Revert 355-ath9k_hw-check-if-the-chip-failed-to-wake.patch
+
+diff --git a/drivers/net/wireless/ath/ath9k/hw.c b/drivers/net/wireless/ath/ath9k/hw.c
+index f0a773850289e8d9478d28d33f29e8d02102053a..e4e7271e70d66c1bd0499db377a7be6ae1bdd7ec 100644
+--- a/drivers/net/wireless/ath/ath9k/hw.c
++++ b/drivers/net/wireless/ath/ath9k/hw.c
+@@ -1680,10 +1680,6 @@ bool ath9k_hw_check_alive(struct ath_hw *ah)
+ 	int count = 50;
+ 	u32 reg, last_val;
+ 
+-	/* Check if chip failed to wake up */
+-	if (REG_READ(ah, AR_CFG) == 0xdeadbeef)
+-		return false;
+-
+ 	if (AR_SREV_9300(ah))
+ 		return !ath9k_hw_detect_mac_hang(ah);
+ 
diff --git a/package/kernel/mac80211/patches/ath/951-Revert-354-ath9k-rename-tx_complete_work-to-hw_check.patch b/package/kernel/mac80211/patches/ath/951-Revert-354-ath9k-rename-tx_complete_work-to-hw_check.patch
new file mode 100644
index 0000000000000000000000000000000000000000..d36920144cdd7a43ff91efc556602f9cf3d42c1c
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath/951-Revert-354-ath9k-rename-tx_complete_work-to-hw_check.patch
@@ -0,0 +1,178 @@
+From: Sven Eckelmann <sven@narfation.org>
+Date: Thu, 23 Apr 2020 18:44:45 +0200
+Subject: Revert 354-ath9k-rename-tx_complete_work-to-hw_check.patch
+
+diff --git a/drivers/net/wireless/ath/ath9k/ath9k.h b/drivers/net/wireless/ath/ath9k/ath9k.h
+index 15ea905a52192b7d97e0962331282bb319dd267e..e38065b2e79f3df92c4679c310a1de871134460f 100644
+--- a/drivers/net/wireless/ath/ath9k/ath9k.h
++++ b/drivers/net/wireless/ath/ath9k/ath9k.h
+@@ -110,7 +110,7 @@ int ath_descdma_setup(struct ath_softc *sc, struct ath_descdma *dd,
+ #define ATH_AGGR_MIN_QDEPTH        2
+ /* minimum h/w qdepth for non-aggregated traffic */
+ #define ATH_NON_AGGR_MIN_QDEPTH    8
+-#define ATH_HW_CHECK_POLL_INT      1000
++#define ATH_TX_COMPLETE_POLL_INT   1000
+ #define ATH_TXFIFO_DEPTH           8
+ #define ATH_TX_ERROR               0x01
+ 
+@@ -747,7 +747,7 @@ void ath9k_csa_update(struct ath_softc *sc);
+ #define ATH_PAPRD_TIMEOUT         100 /* msecs */
+ #define ATH_PLL_WORK_INTERVAL     100
+ 
+-void ath_hw_check_work(struct work_struct *work);
++void ath_tx_complete_poll_work(struct work_struct *work);
+ void ath_reset_work(struct work_struct *work);
+ bool ath_hw_check(struct ath_softc *sc);
+ void ath_hw_pll_work(struct work_struct *work);
+@@ -1080,7 +1080,7 @@ struct ath_softc {
+ #ifdef CPTCFG_ATH9K_DEBUGFS
+ 	struct ath9k_debug debug;
+ #endif
+-	struct delayed_work hw_check_work;
++	struct delayed_work tx_complete_work;
+ 	struct delayed_work hw_pll_work;
+ 	struct timer_list sleep_timer;
+ 
+diff --git a/drivers/net/wireless/ath/ath9k/init.c b/drivers/net/wireless/ath/ath9k/init.c
+index 97f8fc6448f8de692cf2e3eccd77c35a03e3f958..67b4457d0019325ca4919e96d5a5820b357cd9cc 100644
+--- a/drivers/net/wireless/ath/ath9k/init.c
++++ b/drivers/net/wireless/ath/ath9k/init.c
+@@ -744,7 +744,6 @@ static int ath9k_init_softc(u16 devid, struct ath_softc *sc,
+ 	INIT_WORK(&sc->hw_reset_work, ath_reset_work);
+ 	INIT_WORK(&sc->paprd_work, ath_paprd_calibrate);
+ 	INIT_DELAYED_WORK(&sc->hw_pll_work, ath_hw_pll_work);
+-	INIT_DELAYED_WORK(&sc->hw_check_work, ath_hw_check_work);
+ 
+ 	ath9k_init_channel_context(sc);
+ 
+diff --git a/drivers/net/wireless/ath/ath9k/link.c b/drivers/net/wireless/ath/ath9k/link.c
+index 9d84003db800e9513f07ee85a4203dbb7636edf0..321136767c99951682374a632f94476089d57219 100644
+--- a/drivers/net/wireless/ath/ath9k/link.c
++++ b/drivers/net/wireless/ath/ath9k/link.c
+@@ -20,13 +20,20 @@
+  * TX polling - checks if the TX engine is stuck somewhere
+  * and issues a chip reset if so.
+  */
+-static bool ath_tx_complete_check(struct ath_softc *sc)
++void ath_tx_complete_poll_work(struct work_struct *work)
+ {
++	struct ath_softc *sc = container_of(work, struct ath_softc,
++					    tx_complete_work.work);
+ 	struct ath_txq *txq;
+ 	int i;
++	bool needreset = false;
+ 
+-	if (sc->tx99_state)
+-		return true;
++
++	if (sc->tx99_state) {
++		ath_dbg(ath9k_hw_common(sc->sc_ah), RESET,
++			"skip tx hung detection on tx99\n");
++		return;
++	}
+ 
+ 	for (i = 0; i < IEEE80211_NUM_ACS; i++) {
+ 		txq = sc->tx.txq_map[i];
+@@ -34,36 +41,25 @@ static bool ath_tx_complete_check(struct ath_softc *sc)
+ 		ath_txq_lock(sc, txq);
+ 		if (txq->axq_depth) {
+ 			if (txq->axq_tx_inprogress) {
++				needreset = true;
+ 				ath_txq_unlock(sc, txq);
+-				goto reset;
++				break;
++			} else {
++				txq->axq_tx_inprogress = true;
+ 			}
+-
+-			txq->axq_tx_inprogress = true;
+ 		}
+ 		ath_txq_unlock(sc, txq);
+ 	}
+ 
+-	return true;
+-
+-reset:
+-	ath_dbg(ath9k_hw_common(sc->sc_ah), RESET,
+-		"tx hung, resetting the chip\n");
+-	ath9k_queue_reset(sc, RESET_TYPE_TX_HANG);
+-	return false;
+-
+-}
+-
+-void ath_hw_check_work(struct work_struct *work)
+-{
+-	struct ath_softc *sc = container_of(work, struct ath_softc,
+-					    hw_check_work.work);
+-
+-	if (!ath_hw_check(sc) ||
+-	    !ath_tx_complete_check(sc))
++	if (needreset) {
++		ath_dbg(ath9k_hw_common(sc->sc_ah), RESET,
++			"tx hung, resetting the chip\n");
++		ath9k_queue_reset(sc, RESET_TYPE_TX_HANG);
+ 		return;
++	}
+ 
+-	ieee80211_queue_delayed_work(sc->hw, &sc->hw_check_work,
+-				     msecs_to_jiffies(ATH_HW_CHECK_POLL_INT));
++	ieee80211_queue_delayed_work(sc->hw, &sc->tx_complete_work,
++				     msecs_to_jiffies(ATH_TX_COMPLETE_POLL_INT));
+ }
+ 
+ /*
+diff --git a/drivers/net/wireless/ath/ath9k/main.c b/drivers/net/wireless/ath/ath9k/main.c
+index 434fb92f31b2b0a6803884de785133824225111a..49c07032e15a041c58b4467c09f470545ffe5bb0 100644
+--- a/drivers/net/wireless/ath/ath9k/main.c
++++ b/drivers/net/wireless/ath/ath9k/main.c
+@@ -184,7 +184,7 @@ void ath9k_ps_restore(struct ath_softc *sc)
+ static void __ath_cancel_work(struct ath_softc *sc)
+ {
+ 	cancel_work_sync(&sc->paprd_work);
+-	cancel_delayed_work_sync(&sc->hw_check_work);
++	cancel_delayed_work_sync(&sc->tx_complete_work);
+ 	cancel_delayed_work_sync(&sc->hw_pll_work);
+ 
+ #ifdef CPTCFG_ATH9K_BTCOEX_SUPPORT
+@@ -201,8 +201,7 @@ void ath_cancel_work(struct ath_softc *sc)
+ 
+ void ath_restart_work(struct ath_softc *sc)
+ {
+-	ieee80211_queue_delayed_work(sc->hw, &sc->hw_check_work,
+-				     ATH_HW_CHECK_POLL_INT);
++	ieee80211_queue_delayed_work(sc->hw, &sc->tx_complete_work, 0);
+ 
+ 	if (AR_SREV_9340(sc->sc_ah) || AR_SREV_9330(sc->sc_ah))
+ 		ieee80211_queue_delayed_work(sc->hw, &sc->hw_pll_work,
+@@ -2102,7 +2101,7 @@ void __ath9k_flush(struct ieee80211_hw *hw, u32 queues, bool drop,
+ 	int timeout;
+ 	bool drain_txq;
+ 
+-	cancel_delayed_work_sync(&sc->hw_check_work);
++	cancel_delayed_work_sync(&sc->tx_complete_work);
+ 
+ 	if (ah->ah_flags & AH_UNPLUGGED) {
+ 		ath_dbg(common, ANY, "Device has been unplugged!\n");
+@@ -2140,8 +2139,7 @@ void __ath9k_flush(struct ieee80211_hw *hw, u32 queues, bool drop,
+ 		ath9k_ps_restore(sc);
+ 	}
+ 
+-	ieee80211_queue_delayed_work(hw, &sc->hw_check_work,
+-				     ATH_HW_CHECK_POLL_INT);
++	ieee80211_queue_delayed_work(hw, &sc->tx_complete_work, 0);
+ }
+ 
+ static bool ath9k_tx_frames_pending(struct ieee80211_hw *hw)
+diff --git a/drivers/net/wireless/ath/ath9k/xmit.c b/drivers/net/wireless/ath/ath9k/xmit.c
+index a1a516407a60d75b03772c1853c88b678f935344..21fc71dce8fa0bde8793eb50f2161703256d087b 100644
+--- a/drivers/net/wireless/ath/ath9k/xmit.c
++++ b/drivers/net/wireless/ath/ath9k/xmit.c
+@@ -2876,6 +2876,8 @@ int ath_tx_init(struct ath_softc *sc, int nbufs)
+ 		return error;
+ 	}
+ 
++	INIT_DELAYED_WORK(&sc->tx_complete_work, ath_tx_complete_poll_work);
++
+ 	if (sc->sc_ah->caps.hw_caps & ATH9K_HW_CAP_EDMA)
+ 		error = ath_tx_edma_init(sc);
+ 
diff --git a/package/kernel/mac80211/patches/ath/952-ath9k-work-around-deadbeef-wifi-chip-hang.patch b/package/kernel/mac80211/patches/ath/952-ath9k-work-around-deadbeef-wifi-chip-hang.patch
new file mode 100644
index 0000000000000000000000000000000000000000..1a4f4a1ddbce5db08273bab123efbd068c1bd45f
--- /dev/null
+++ b/package/kernel/mac80211/patches/ath/952-ath9k-work-around-deadbeef-wifi-chip-hang.patch
@@ -0,0 +1,56 @@
+From: Sven Eckelmann <sven@narfation.org>
+Date: Thu, 23 Apr 2020 18:45:15 +0200
+Subject: ath9k: work around deadbeef wifi chip hang
+
+diff --git a/drivers/net/wireless/ath/ath9k/debug.c b/drivers/net/wireless/ath/ath9k/debug.c
+index f20364bd20273acc0023394ca55a00b35407494c..1aeabb58dc022127ba1857262b82f52403c8e4ac 100644
+--- a/drivers/net/wireless/ath/ath9k/debug.c
++++ b/drivers/net/wireless/ath/ath9k/debug.c
+@@ -765,6 +765,7 @@ static int read_file_reset(struct seq_file *file, void *data)
+ 		[RESET_TYPE_CALIBRATION] = "Calibration error",
+ 		[RESET_TX_DMA_ERROR] = "Tx DMA stop error",
+ 		[RESET_RX_DMA_ERROR] = "Rx DMA stop error",
++		[RESET_TYPE_DEADBEEF] = "deadbeef hang",
+ 	};
+ 	int i;
+ 
+diff --git a/drivers/net/wireless/ath/ath9k/debug.h b/drivers/net/wireless/ath/ath9k/debug.h
+index 80cf8b3782d419ea7de5315fa148d6ccea9f306f..60ada5dd21c9d456f15c8c1f785aeeba4e1acc60 100644
+--- a/drivers/net/wireless/ath/ath9k/debug.h
++++ b/drivers/net/wireless/ath/ath9k/debug.h
+@@ -52,6 +52,7 @@ enum ath_reset_type {
+ 	RESET_TYPE_CALIBRATION,
+ 	RESET_TX_DMA_ERROR,
+ 	RESET_RX_DMA_ERROR,
++	RESET_TYPE_DEADBEEF,
+ 	__RESET_TYPE_MAX
+ };
+ 
+diff --git a/drivers/net/wireless/ath/ath9k/link.c b/drivers/net/wireless/ath/ath9k/link.c
+index 321136767c99951682374a632f94476089d57219..3adcc199e336005765c323bd38651cf21dd13c25 100644
+--- a/drivers/net/wireless/ath/ath9k/link.c
++++ b/drivers/net/wireless/ath/ath9k/link.c
+@@ -308,6 +308,7 @@ void ath_ani_calibrate(struct timer_list *t)
+ 	unsigned int timestamp = jiffies_to_msecs(jiffies);
+ 	u32 cal_interval, short_cal_interval, long_cal_interval;
+ 	unsigned long flags;
++	u32 reg;
+ 
+ 	if (ah->caldata && test_bit(NFCAL_INTF, &ah->caldata->cal_flags))
+ 		long_cal_interval = ATH_LONG_CALINTERVAL_INT;
+@@ -333,6 +334,15 @@ void ath_ani_calibrate(struct timer_list *t)
+ 
+ 	ath9k_ps_wakeup(sc);
+ 
++	/* check for stucked MAC */
++	reg = REG_READ(sc->sc_ah, AR_CFG);
++	if (reg == 0xdeadbeef) {
++		ath_dbg(common, RESET,
++			"Deadbeef hang is detected. Schedule chip reset\n");
++		WARN_ON(reg == 0xdeadbeef);
++		ath9k_queue_reset(sc, RESET_TYPE_DEADBEEF);
++	}
++
+ 	/* Long calibration runs independently of short calibration. */
+ 	if ((timestamp - common->ani.longcal_timer) >= long_cal_interval) {
+ 		longcal = true;
